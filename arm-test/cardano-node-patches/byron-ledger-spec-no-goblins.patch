diff --git a//byron-spec-ledger.cabal b//byron-spec-ledger.cabal
index 6c7d593a..15118137 100644
--- a//byron-spec-ledger.cabal
+++ b//byron-spec-ledger.cabal
@@ -20,6 +20,11 @@ flag development
     default: False
     manual: True

+flag goblins
+    description: Enable globlins
+    default: True
+    manual: True
+
 library
   hs-source-dirs:      src
   exposed-modules:     Hedgehog.Gen.Double
@@ -64,6 +69,9 @@ library
   if (!flag(development))
     ghc-options: -Werror

+  if (flag(goblins))
+    ghc-options: -DGOBLINS
+
 test-suite doctests
   hs-source-dirs:      test
   main-is:             DoctestDiscover.hs
diff --git a//src/Byron/Spec/Ledger/Delegation.hs b//src/Byron/Spec/Ledger/Delegation.hs
index 35d57328..735be9cd 100644
--- a//src/Byron/Spec/Ledger/Delegation.hs
+++ b//src/Byron/Spec/Ledger/Delegation.hs
@@ -10,6 +10,7 @@
 {-# LANGUAGE TemplateHaskell #-}
 {-# LANGUAGE TypeApplications #-}
 {-# LANGUAGE TypeFamilies #-}
+{-# LANGUAGE CPP #-}

 module Byron.Spec.Ledger.Delegation
   ( -- * Delegation scheduling
@@ -119,7 +120,7 @@ import           Control.State.Transition (Embed, Environment, IRC (IRC), Predic
                      Signal, State, TRC (TRC), initialRules, judgmentContext, trans,
                      transitionRules, wrapFailed, (?!))
 import           Control.State.Transition.Generator (HasTrace, SignalGenerator, envGen, genTrace,
-                     sigGen, tinkerWithSigGen)
+                     sigGen)
 import           Control.State.Transition.Trace (TraceOrder (OldestFirst), traceSignals)
 import           Byron.Spec.Ledger.Core (BlockCount, Epoch (Epoch), HasHash, Hash (Hash), Owner (Owner), Sig,
                      Slot (Slot), SlotCount (SlotCount), VKey (VKey), VKeyGenesis (VKeyGenesis),
@@ -130,10 +131,13 @@ import qualified Byron.Spec.Ledger.Core.Generators as CoreGen
 import           Byron.Spec.Ledger.Core.Omniscient (signWithGenesisKey)

 import           Byron.Spec.Ledger.Util (mkGoblinGens)
-import           Test.Goblin (AddShrinks (..), Goblin (..), GoblinData, SeedGoblin (..),
-                     mkEmptyGoblin)
+import           Test.Goblin (AddShrinks (..), Goblin (..), SeedGoblin (..))
 import           Test.Goblin.TH (deriveAddShrinks, deriveGoblin, deriveSeedGoblin)

+#if defined(GOBLINS)
+import           Control.State.Transition.Generator (tinkerWithSigGen)
+import           Test.Goblin (GoblinData, mkEmptyGoblin)
+#endif

 --------------------------------------------------------------------------------
 -- Abstract types
@@ -809,10 +813,13 @@ deriveSeedGoblin ''DIState

 mkGoblinGens
   "DELEG"
-  [ "SDelegSFailure_SDelegFailure_EpochInThePast"
+  [
+#if defined(GOBLINS)
+    "SDelegSFailure_SDelegFailure_EpochInThePast"
   , "SDelegSFailure_SDelegFailure_EpochPastNextEpoch"
   , "SDelegSFailure_SDelegFailure_IsAlreadyScheduled"
   , "SDelegSFailure_SDelegFailure_IsNotGenesisKey"
+#endif
   ]

 tamperedDcerts :: DIEnv -> DIState -> Gen [DCert]
diff --git a//src/Byron/Spec/Ledger/STS/UTXOW.hs b//src/Byron/Spec/Ledger/STS/UTXOW.hs
index 95114dc5..7460c582 100644
--- a//src/Byron/Spec/Ledger/STS/UTXOW.hs
+++ b//src/Byron/Spec/Ledger/STS/UTXOW.hs
@@ -10,6 +10,7 @@
 {-# LANGUAGE TemplateHaskell #-}
 {-# LANGUAGE TypeApplications #-}
 {-# LANGUAGE TypeFamilies #-}
+{-# LANGUAGE CPP #-}

 -- | UTXO transition system with witnessing

@@ -29,7 +30,7 @@ import           Control.State.Transition (Embed, Environment, IRC (IRC), Predic
                      Signal, State, TRC (TRC), initialRules, judgmentContext, trans,
                      transitionRules, wrapFailed, (?!))
 import           Control.State.Transition.Generator (HasTrace, SignalGenerator, coverFailures,
-                     envGen, sigGen, tinkerWithSigGen)
+                     envGen, sigGen)

 import           Byron.Spec.Ledger.Core (Addr (Addr),VKey, mkAddr, verify)
 import qualified Byron.Spec.Ledger.Update.Generators as UpdateGen
@@ -40,8 +41,10 @@ import qualified Byron.Spec.Ledger.UTxO.Generators as UTxOGen

 import           Byron.Spec.Ledger.STS.UTXO

+#if defined(GOBLINS)
+import           Control.State.Transition.Generator (tinkerWithSigGen)
 import           Test.Goblin (GoblinData, mkEmptyGoblin)
-
+#endif

 data UTXOW deriving (Data, Typeable)

@@ -118,12 +121,15 @@ instance HasTrace UTXOW where

 mkGoblinGens
   "UTXOW"
-  [ "InsufficientWitnesses"
+  [
+#if defined(GOBLINS)
+    "InsufficientWitnesses"
   , "UtxoFailure_EmptyTxInputs"
   , "UtxoFailure_EmptyTxOutputs"
   , "UtxoFailure_FeeTooLow"
   , "UtxoFailure_InputsNotInUTxO"
   , "UtxoFailure_NonPositiveOutputs"
+#endif
   ]

 tamperedTxList :: UTxOEnv -> UTxOState -> Gen [Tx]
diff --git a//src/Byron/Spec/Ledger/UTxO.hs b//src/Byron/Spec/Ledger/UTxO.hs
index 536b3113..286b3331 100644
--- a//src/Byron/Spec/Ledger/UTxO.hs
+++ b//src/Byron/Spec/Ledger/UTxO.hs
@@ -14,7 +14,6 @@
 {-# LANGUAGE TypeFamilies #-}
 {-# LANGUAGE UndecidableInstances #-}

-
 {-# OPTIONS_GHC -fno-warn-redundant-constraints #-}

 module Byron.Spec.Ledger.UTxO where
diff --git a//src/Byron/Spec/Ledger/Update.hs b//src/Byron/Spec/Ledger/Update.hs
index 7923b765..f761cf49 100644
--- a//src/Byron/Spec/Ledger/Update.hs
+++ b//src/Byron/Spec/Ledger/Update.hs
@@ -14,6 +14,7 @@
 {-# LANGUAGE TupleSections #-}
 {-# LANGUAGE TypeApplications #-}
 {-# LANGUAGE TypeFamilies #-}
+{-# LANGUAGE CPP #-}

 -- This is for the Hashable Set instance
 {-# OPTIONS_GHC -fno-warn-orphans #-}
@@ -27,11 +28,9 @@ where
 import           Cardano.Prelude (NoUnexpectedThunks(..))
 import           Control.Arrow (second, (&&&))
 import           Control.Lens
-import           Control.Monad (mzero)
 import           Data.Bimap (Bimap, empty, lookupR)
 import qualified Data.Bimap as Bimap
 import           Data.Char (isAscii)
-import           Data.Coerce (coerce)
 import           Data.Data (Data, Typeable)
 import           Data.Foldable (foldl', toList)
 import           Data.Hashable (Hashable)
@@ -53,8 +52,15 @@ import qualified Hedgehog.Range as Range
 import           Numeric.Natural

 import           Control.State.Transition
-import           Control.State.Transition.Generator (HasTrace, SignalGenerator, envGen, sigGen,
-                     tinkerWithSigGen)
+import           Control.State.Transition.Generator (HasTrace, envGen, sigGen)
+#if defined(GOBLINS)
+import           Control.Monad (mzero)
+import           Data.Coerce (coerce)
+import           Control.State.Transition.Generator (SignalGenerator, tinkerWithSigGen)
+import           Byron.Spec.Ledger.Util (mkGoblinGens)
+import           Test.Goblin (GoblinData, mkEmptyGoblin, saveInBagOfTricks,
+                     tinkerRummagedOrConjureOrSave, transcribeGenesAsInt, (<$$>))
+#endif
 import           Data.AbstractSize (HasTypeReps)

 import           Byron.Spec.Ledger.Core (BlockCount (..), HasHash, Owner (Owner), Relation (..), Slot,
@@ -64,10 +70,9 @@ import qualified Byron.Spec.Ledger.Core as Core
 import qualified Byron.Spec.Ledger.Core.Generators as CoreGen
 import           Byron.Spec.Ledger.Core.Omniscient (skey)
 import qualified Byron.Spec.Ledger.GlobalParams as GP
-import           Byron.Spec.Ledger.Util (mkGoblinGens)

-import           Test.Goblin (AddShrinks (..), GeneOps, Goblin (..), GoblinData, SeedGoblin (..),
-                     mkEmptyGoblin, saveInBagOfTricks, tinkerRummagedOrConjureOrSave,
+import           Test.Goblin (AddShrinks (..), GeneOps, Goblin (..), SeedGoblin (..),
+                     saveInBagOfTricks, tinkerRummagedOrConjureOrSave,
                      transcribeGenesAsInt, (<$$>))
 import           Test.Goblin.TH (deriveAddShrinks, deriveGoblin, deriveSeedGoblin)

@@ -1821,7 +1826,7 @@ deriveSeedGoblin ''UpId
 --------------------------------------------------------------------------------
 -- GoblinData & goblin-tinkered SignalGenerators
 --------------------------------------------------------------------------------
-
+#if defined(GOBLINS)
 mkGoblinGens
   "UPIREG"
   [ "UPREGFailure_DoesNotVerify"
@@ -1997,3 +2002,4 @@ tamperWithVote vote =
         pure $! vote & vSig .~ Core.sign (skey vk) (vote ^. vPropId)
     , pure $! vote
     ]
+#endif
\ No newline at end of file
